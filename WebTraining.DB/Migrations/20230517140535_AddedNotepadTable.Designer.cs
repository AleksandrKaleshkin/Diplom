// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebTraining.DB.DataContext;

#nullable disable

namespace WebTraining.DB.Migrations
{
    [DbContext(typeof(WebTrainingContext))]
    [Migration("20230517140535_AddedNotepadTable")]
    partial class AddedNotepadTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExerciseTraining", b =>
                {
                    b.Property<int>("ExercisiesID")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingsID")
                        .HasColumnType("integer");

                    b.HasKey("ExercisiesID", "TrainingsID");

                    b.HasIndex("TrainingsID");

                    b.ToTable("ExerciseTraining");
                });

            modelBuilder.Entity("WebTraining.DB.Models.Exercise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("NameExercise")
                        .HasColumnType("text");

                    b.Property<string>("NameImage1")
                        .HasColumnType("text");

                    b.Property<string>("NameImage2")
                        .HasColumnType("text");

                    b.Property<string>("NameImage3")
                        .HasColumnType("text");

                    b.Property<string>("PathImage1")
                        .HasColumnType("text");

                    b.Property<string>("PathImage2")
                        .HasColumnType("text");

                    b.Property<string>("PathImage3")
                        .HasColumnType("text");

                    b.Property<int>("TypeOfMuscleID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("TypeOfMuscleID");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("WebTraining.DB.Models.Notepad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateNote")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Notepads");
                });

            modelBuilder.Entity("WebTraining.DB.Models.Training", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateTraining")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameTraining")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("WebTraining.DB.Models.TrainingExercise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer");

                    b.Property<int>("Repetitions")
                        .HasColumnType("integer");

                    b.Property<int>("Sets")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingExercises");
                });

            modelBuilder.Entity("WebTraining.DB.Models.TypeOfMuscle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NameType")
                        .HasColumnType("text");

                    b.Property<int?>("TypeOfMuscleID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("TypeOfMuscleID");

                    b.ToTable("TypeOfMuscles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            NameType = "Битцепс"
                        },
                        new
                        {
                            ID = 2,
                            NameType = "Пресс"
                        },
                        new
                        {
                            ID = 3,
                            NameType = "Трицепс"
                        },
                        new
                        {
                            ID = 4,
                            NameType = "Плечи"
                        },
                        new
                        {
                            ID = 5,
                            NameType = "Предплечья"
                        },
                        new
                        {
                            ID = 6,
                            NameType = "Голень"
                        },
                        new
                        {
                            ID = 7,
                            NameType = "Ноги"
                        },
                        new
                        {
                            ID = 8,
                            NameType = "Спина"
                        },
                        new
                        {
                            ID = 9,
                            NameType = "Грудь"
                        });
                });

            modelBuilder.Entity("ExerciseTraining", b =>
                {
                    b.HasOne("WebTraining.DB.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebTraining.DB.Models.Training", null)
                        .WithMany()
                        .HasForeignKey("TrainingsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebTraining.DB.Models.Exercise", b =>
                {
                    b.HasOne("WebTraining.DB.Models.TypeOfMuscle", "TypeOfMuscle")
                        .WithMany()
                        .HasForeignKey("TypeOfMuscleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeOfMuscle");
                });

            modelBuilder.Entity("WebTraining.DB.Models.TrainingExercise", b =>
                {
                    b.HasOne("WebTraining.DB.Models.Exercise", "Exercise")
                        .WithMany("TrainingExercise")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebTraining.DB.Models.Training", "Training")
                        .WithMany("TrainingExercisies")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("WebTraining.DB.Models.TypeOfMuscle", b =>
                {
                    b.HasOne("WebTraining.DB.Models.TypeOfMuscle", null)
                        .WithMany("TypeOfMuscles")
                        .HasForeignKey("TypeOfMuscleID");
                });

            modelBuilder.Entity("WebTraining.DB.Models.Exercise", b =>
                {
                    b.Navigation("TrainingExercise");
                });

            modelBuilder.Entity("WebTraining.DB.Models.Training", b =>
                {
                    b.Navigation("TrainingExercisies");
                });

            modelBuilder.Entity("WebTraining.DB.Models.TypeOfMuscle", b =>
                {
                    b.Navigation("TypeOfMuscles");
                });
#pragma warning restore 612, 618
        }
    }
}
